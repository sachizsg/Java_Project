/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view.Appointments;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Appointments.HandleNewAppointment;
import net.proteanit.sql.DbUtils;



/**
 *
 * @author Samu
 */
public class AddEmployee extends javax.swing.JDialog {

        
    private final ImageIcon doneOut;
    private final ImageIcon doneEnter;
    
    private final ImageIcon cancelOut;
    private final ImageIcon cancelEnter;
    
    private LinkedList appointmentDetails;
    
    private int rowCount = 0;
    
    public AddEmployee(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();        
           
        
        doneOut = new ImageIcon(getClass().getResource("/view/Appointments/doneOut.png"));  
        doneEnter = new ImageIcon(getClass().getResource("/view/Appointments/doneEnter.png"));  
        
        cancelOut = new ImageIcon(getClass().getResource("/view/Appointments/cancelOut.png"));  
        cancelEnter = new ImageIcon(getClass().getResource("/view/Appointments/cancelEnter.png")); 
        
        this.getEmployeeList();
                
        
        this.pack();
    }
    
    
    public AddEmployee(java.awt.Frame parent, boolean modal,LinkedList appointmentDetails) {
        super(parent, modal);
        initComponents();                
        
        doneOut = new ImageIcon(getClass().getResource("/view/Appointments/doneOut.png"));  
        doneEnter = new ImageIcon(getClass().getResource("/view/Appointments/doneEnter.png"));  
        
        cancelOut = new ImageIcon(getClass().getResource("/view/Appointments/cancelOut.png"));  
        cancelEnter = new ImageIcon(getClass().getResource("/view/Appointments/cancelEnter.png")); 
        
        this.appointmentDetails = appointmentDetails;
         
        this.getEmployeeList();                
        
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        selectEmployeeLabel = new javax.swing.JLabel();
        cancelEmployeeLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        selectedEmployeeTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        EmployeeTable = new javax.swing.JTable();
        doneLabel = new javax.swing.JLabel();
        cancelLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 550));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMinimumSize(new java.awt.Dimension(850, 550));
        jPanel1.setPreferredSize(new java.awt.Dimension(850, 550));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setBackground(new java.awt.Color(51, 0, 51));
        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Employee List");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 75, 230, 20));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/buttonGlass.png"))); // NOI18N
        jLabel8.setIconTextGap(0);
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 540, 30));

        jLabel9.setBackground(new java.awt.Color(51, 0, 51));
        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Selected Employees");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 265, 200, 20));

        selectEmployeeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/donesmall.png"))); // NOI18N
        selectEmployeeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectEmployeeLabel.setIconTextGap(0);
        selectEmployeeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectEmployeeLabelMouseClicked(evt);
            }
        });
        jPanel1.add(selectEmployeeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 262, 25, 25));

        cancelEmployeeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/cancelsmall.png"))); // NOI18N
        cancelEmployeeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelEmployeeLabel.setIconTextGap(0);
        cancelEmployeeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelEmployeeLabelMouseClicked(evt);
            }
        });
        jPanel1.add(cancelEmployeeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 262, 25, 25));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/buttonGlass.png"))); // NOI18N
        jLabel10.setIconTextGap(0);
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 540, 30));

        jLabel1.setBackground(new java.awt.Color(51, 0, 51));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Additional Employee");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 250, 35));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/titleGlass.png"))); // NOI18N
        jLabel2.setIconTextGap(0);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 810, 50));

        selectedEmployeeTable.setBackground(new java.awt.Color(204, 204, 204));
        selectedEmployeeTable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        selectedEmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectedEmployeeTable.setFillsViewportHeight(true);
        selectedEmployeeTable.setRowHeight(25);
        selectedEmployeeTable.getTableHeader().setReorderingAllowed(false);
        selectedEmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedEmployeeTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(selectedEmployeeTable);
        if (selectedEmployeeTable.getColumnModel().getColumnCount() > 0) {
            selectedEmployeeTable.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 290, 790, 150));

        EmployeeTable.setBackground(new java.awt.Color(204, 204, 204));
        EmployeeTable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service Details", "Employee", "Additional Employee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EmployeeTable.setFillsViewportHeight(true);
        EmployeeTable.setRowHeight(25);
        EmployeeTable.getTableHeader().setReorderingAllowed(false);
        EmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(EmployeeTable);
        if (EmployeeTable.getColumnModel().getColumnCount() > 0) {
            EmployeeTable.getColumnModel().getColumn(0).setResizable(false);
            EmployeeTable.getColumnModel().getColumn(1).setResizable(false);
            EmployeeTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 100, 790, 150));

        doneLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/doneOut.png"))); // NOI18N
        doneLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        doneLabel.setIconTextGap(0);
        doneLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doneLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doneLabelMouseExited(evt);
            }
        });
        jPanel1.add(doneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 460, 150, 50));

        cancelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/cancelOut.png"))); // NOI18N
        cancelLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelLabel.setIconTextGap(0);
        cancelLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelLabelMouseExited(evt);
            }
        });
        jPanel1.add(cancelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 460, 150, 50));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/buttonGlass.png"))); // NOI18N
        jLabel5.setIconTextGap(0);
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 450, 540, 75));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Appointments/backgroundsmall.jpg"))); // NOI18N
        jLabel6.setIconTextGap(0);
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void getEmployeeList(){        
                   
        HandleNewAppointment hna = new HandleNewAppointment();
        
        try{           
            hna.setEmployeeID(this.appointmentDetails.get(0).toString());
            ResultSet rs = hna.employeeList();           
            EmployeeTable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(ClassNotFoundException ex){
               JOptionPane.showMessageDialog(null, "Database cannot be found.", "ClassNotFoundException", JOptionPane.ERROR_MESSAGE);
        } 
        catch(SQLException ex){
               JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        catch(Exception ex){
               JOptionPane.showMessageDialog(null, ex.getMessage());
        }
                
    }    
    
    private void doneLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneLabelMouseEntered
        doneLabel.setIcon(doneEnter);
    }//GEN-LAST:event_doneLabelMouseEntered

    private void doneLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneLabelMouseExited
        doneLabel.setIcon(doneOut);
    }//GEN-LAST:event_doneLabelMouseExited

    private void cancelLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelLabelMouseEntered
        cancelLabel.setIcon(cancelEnter);
    }//GEN-LAST:event_cancelLabelMouseEntered

    private void cancelLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelLabelMouseExited
        cancelLabel.setIcon(cancelOut);
    }//GEN-LAST:event_cancelLabelMouseExited

    private void doneLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneLabelMouseClicked
        HandleNewAppointment hna = new HandleNewAppointment();
        LinkedList selectedEmployees = new LinkedList();
        
        if (selectedEmployeeTable.getRowCount() == 0) {            
           
            this.appointmentDetails.add(selectedEmployees);          
           
            AppointmentDetails ad = new AppointmentDetails(null, true,this.appointmentDetails);
            this.dispose();
            ad.setVisible(true);
            
            
        }
        else{
           
            for (int i = 0; i < selectedEmployeeTable.getRowCount(); i++) {
                
                String employeeName = selectedEmployeeTable.getValueAt(i, 0).toString();
                hna.setEmployeeName(employeeName);
                try{
                    ResultSet rs = hna.getSelectedEmployeeID();
                    if (rs.next()) {
                        String employeeID = rs.getString("Employee_ID");
                        selectedEmployees.add(employeeID);
                      
                    }
                }
                catch(ClassNotFoundException ex){
                    JOptionPane.showMessageDialog(null, "Database cannot be found.", "ClassNotFoundException", JOptionPane.ERROR_MESSAGE);
                } 
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
                
            }
            
            this.appointmentDetails.add(selectedEmployees);          
           
            AppointmentDetails ad = new AppointmentDetails(null, true,this.appointmentDetails);
            this.dispose();
            ad.setVisible(true);
            
        }
        
        
    }//GEN-LAST:event_doneLabelMouseClicked

    private void cancelLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelLabelMouseClicked
        this.dispose();
    }//GEN-LAST:event_cancelLabelMouseClicked

    private void selectEmployeeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectEmployeeLabelMouseClicked
        
        HandleNewAppointment hna = new HandleNewAppointment();
        int selectedRow = EmployeeTable.getSelectedRow();
        
        if (EmployeeTable.getRowCount()== 0) {
                    JOptionPane.showMessageDialog(null, "All employees are unavailable.", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Please select the employee.", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            else{   
                
                if (EmployeeTable.getValueAt(selectedRow, 2).toString().equalsIgnoreCase("Selected")) {
                    JOptionPane.showMessageDialog(null, "This employee is already selected.", "Message", JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                        String employeeID = EmployeeTable.getValueAt(selectedRow, 0).toString();
                        String employeempName = EmployeeTable.getValueAt(selectedRow, 1).toString();
                        
                        hna.setClientStartTime(this.appointmentDetails.get(1).toString());                                             
                        hna.setClientDate(this.appointmentDetails.get(2).toString());                        
                        hna.setEmployeeID(employeeID);    
                
                        try{
                            ResultSet rs = hna.checkEmployeeAvailability();
                            if (rs.next() ) {
                                JOptionPane.showMessageDialog(null, "This employee is not available for this appointment.", "Message", JOptionPane.INFORMATION_MESSAGE);
                            }
                            else{
                                DefaultTableModel model = (DefaultTableModel) selectedEmployeeTable.getModel();
                                int x = model.getRowCount();
                                model.setRowCount(x+1);

                                selectedEmployeeTable.setValueAt(employeempName, this.rowCount, 0);
                                EmployeeTable.setValueAt("Selected", selectedRow, 2);
                
                                this.rowCount++;
                    
                            }
                        }
                        catch(ClassNotFoundException ex){
                            JOptionPane.showMessageDialog(null, "Database cannot be found.", "ClassNotFoundException", JOptionPane.ERROR_MESSAGE);
                        } 
                        catch(SQLException ex){
                            JOptionPane.showMessageDialog(null, ex.getMessage());
                        }
                        catch(Exception ex){
                            JOptionPane.showMessageDialog(null, ex.getMessage());
                        }               
                         
                }
                
            }
            
        }

        
    }//GEN-LAST:event_selectEmployeeLabelMouseClicked

    
    private void cancelEmployeeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelEmployeeLabelMouseClicked

        int selectedRow = selectedEmployeeTable.getSelectedRow();
        
        if (selectedEmployeeTable.getRowCount()== 0) {
                    JOptionPane.showMessageDialog(null, "Selected employee table is empty.", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Please select the employee that you need to be remove.", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            else{

                DefaultTableModel model = (DefaultTableModel) selectedEmployeeTable.getModel();
                
               

                    String employeeName = selectedEmployeeTable.getValueAt(selectedRow, 0).toString();               

                    model.removeRow(selectedRow);                    
                    this.rowCount--;

                    for (int j = 0; j < EmployeeTable.getRowCount(); j++) {
                    
                        String employeempName1 = EmployeeTable.getValueAt(j, 1).toString();
                        if (employeeName.equalsIgnoreCase(employeempName1)) {
                            EmployeeTable.setValueAt("Not Selected", j, 2);
                        }                   
                    
                    }

            }
            
            
        }
        

    }//GEN-LAST:event_cancelEmployeeLabelMouseClicked

    private void EmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeTableMouseClicked
        selectedEmployeeTable.getSelectionModel().clearSelection();   
    }//GEN-LAST:event_EmployeeTableMouseClicked

    private void selectedEmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedEmployeeTableMouseClicked
        EmployeeTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_selectedEmployeeTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddEmployee dialog = new AddEmployee(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EmployeeTable;
    private javax.swing.JLabel cancelEmployeeLabel;
    private javax.swing.JLabel cancelLabel;
    private javax.swing.JLabel doneLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel selectEmployeeLabel;
    private javax.swing.JTable selectedEmployeeTable;
    // End of variables declaration//GEN-END:variables
}
